#--------------------------------------------------------------------
Rcpp::sourceCpp('~/project/bayesian/algorithm/generator.cpp')
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
#--------------------------------------------------------------------
# Generate data
#--------------------------------------------------------------------
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
data=as.vector(list_data[[2]])
# Setting intial value for 'c' using k-means algorithm.
# Let the number of cluster be logarithm of the number of data.
require(cluster)
C <- kmeans(data, round(log(length(data)))+1)$cluster #initial cluster
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
res_algo2 <- algorithm2(data)
#--------------------------------------------------------------------
# Generate data
#--------------------------------------------------------------------
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
data=as.vector(list_data[[2]])
# Setting intial value for 'c' using k-means algorithm.
# Let the number of cluster be logarithm of the number of data.
require(cluster)
C <- kmeans(data, round(log(length(data)))+1)$cluster #initial cluster
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
post_algo2 <- algo2_cpp(data, C)
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
post_algo2 <- algo2_cpp(data, C)
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
------------
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
res_algo2 <- algorithm2(data)
n = 100
alpha = 0.6
tol = 0.01
set.seed(1004)
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
Rcpp::sourceCpp('~/project/bayesian/algorithm/generator.cpp')
#--------------------------------------------------------------------
# Generate data
#--------------------------------------------------------------------
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
data=as.vector(list_data[[2]])
# Setting intial value for 'c' using k-means algorithm.
# Let the number of cluster be logarithm of the number of data.
require(cluster)
C <- kmeans(data, round(log(length(data)))+1)$cluster #initial cluster
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
#--------------------------------------------------------------------
# Advanced Bayesian - Dirichelet Process Mixture Model
# 2013-22897 Kwon, Yongchan
#--------------------------------------------------------------------
#--------------------------------------------------------------------
# Default setting
#--------------------------------------------------------------------
n = 10
alpha = 0.6
tol = 0.1
set.seed(1004)
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
Rcpp::sourceCpp('~/project/bayesian/algorithm/generator.cpp')
#--------------------------------------------------------------------
# Generate data
#--------------------------------------------------------------------
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
data=as.vector(list_data[[2]])
# Setting intial value for 'c' using k-means algorithm.
# Let the number of cluster be logarithm of the number of data.
require(cluster)
C <- kmeans(data, round(log(length(data)))+1)$cluster #initial cluster
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
post_algo2 <- algo2_cpp(data, C, thining=1000)
# posterior 계산해보고
# algorithm별로 차이점 생각한뒤
# code 짜기
# posteriror distribution 구해서 histogram 그리기
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
timesTwo(2)
dnorm(0,0,1)
dnorm(1,0,1)
dgamma(1,0,1)
dgamma(1,1,1)
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
timesTwo(2)
dgamma(1,1,1)
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
n = 7
alpha = 0.6
tol = 0.1
set.seed(1004)
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
Rcpp::sourceCpp('~/project/bayesian/algorithm/generator.cpp')
#--------------------------------------------------------------------
# Generate data
#--------------------------------------------------------------------
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
data=as.vector(list_data[[2]])
# Setting intial value for 'c' using k-means algorithm.
# Let the number of cluster be logarithm of the number of data.
require(cluster)
C <- kmeans(data, round(log(length(data)))+1)$cluster #initial cluster
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
timesTwo(1)
dgamma(1,1,2)
dgamma(1,1,1/2)
dnorm(1,0,2)
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
timesTwo(1)
dnorm(1,0,2)
dgamma(1,1,1/2)
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
?dgamma
timesTwo(1,1,2)
timesTwo(1)
dgamma(1,1,rate=2)
dgamma(1,1,rate=1/2)
?rgamma
?dnorm
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
rnd(3)
rnd(3)
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
rnd(3)
dnorm(1,0,2)
dgamma(1,1,2)
set.seed(1)
rnd(3)
set.seed(1)
rnorm(1)
rnorm(1,2)
set.seed(1)
rnorm(1,2)
dgamma(1,1,2)
dgamma(1,1,1/2)
dgamma(1,1,rate = 1/2)
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
timesTwo(1)
yyyy= timesTwo(1)
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
yyyy= timesTwo(1)
colMeans(yyyy)
apply(yyyy, sd(), 1)
apply(yyyy, sd(), 2)
?apply
apply(yyyy, MARGIN=1, FUN=sd())
apply(yyyy, MARGIN=1, FUN=sd
)
apply(yyyy, MARGIN=2, FUN=sd)
apply(yyyy, MARGIN=2, FUN=var)
apply(yyyy, MARGIN=2, FUN=mean)
Rcpp::sourceCpp('project/bayesian/cpp_test.cpp')
yyyy = timesTwo(2)
apply(yyyy, MARGIN=2, FUN=mean)
apply(yyyy, MARGIN=2, FUN=var)
Rcpp::sourceCpp('project/bayesian/algorithm/generator.cpp')
Rcpp::sourceCpp('project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
n = 200
alpha = 0.6
tol = 0.1
set.seed(1004)
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
Rcpp::sourceCpp('~/project/bayesian/algorithm/generator.cpp')
#--------------------------------------------------------------------
# Generate data
#--------------------------------------------------------------------
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
data=as.vector(list_data[[2]])
# Setting intial value for 'c' using k-means algorithm.
# Let the number of cluster be logarithm of the number of data.
require(cluster)
C <- kmeans(data, round(log(length(data)))+1)$cluster #initial cluster
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
data
#--------------------------------------------------------------------
# Default setting
#--------------------------------------------------------------------
n = 200
alpha = 0.6
tol = 0.1
set.seed(1004)
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
Rcpp::sourceCpp('~/project/bayesian/algorithm/generator.cpp')
#--------------------------------------------------------------------
# Generate data
#--------------------------------------------------------------------
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
data=as.vector(list_data[[2]])
# Setting intial value for 'c' using k-means algorithm.
# Let the number of cluster be logarithm of the number of data.
require(cluster)
C <- kmeans(data, round(log(length(data)))+1)$cluster #initial cluster
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
data
#--------------------------------------------------------------------
n = 200
alpha = 0.6
tol = 0.1
set.seed(1004)
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
Rcpp::sourceCpp('~/project/bayesian/algorithm/generator.cpp')
#--------------------------------------------------------------------
# Generate data
#--------------------------------------------------------------------
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
data=as.vector(list_data[[2]])
data
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
tol = 0.01
set.seed(1004)
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
Rcpp::sourceCpp('~/project/bayesian/algorithm/generator.cpp')
#--------------------------------------------------------------------
# Generate data
#--------------------------------------------------------------------
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
data=as.vector(list_data[[2]])
# Setting intial value for 'c' using k-means algorithm.
# Let the number of cluster be logarithm of the number of data.
require(cluster)
C <- kmeans(data, round(log(length(data)))+1)$cluster #initial cluster
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
post_algo2
post_algo2 <- algo2_cpp(data, C, thining=1000)
post_algo2 <- algo2_cpp(data, C, thining=1000)
post_algo2 <- algo2_cpp(data, C, thining=1000)
n = 10
alpha = 0.6
tol = 0.01
set.seed(1004)
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
Rcpp::sourceCpp('~/project/bayesian/algorithm/generator.cpp')
#--------------------------------------------------------------------
# Generate data
#--------------------------------------------------------------------
list_data = generator_cpp(n, alpha = alpha, tol=tol) #default arguments generate data y which are easily separable.
theta=list_data[[1]] #weight, mean, precision
data=as.vector(list_data[[2]])
# Setting intial value for 'c' using k-means algorithm.
# Let the number of cluster be logarithm of the number of data.
require(cluster)
C <- kmeans(data, round(log(length(data)))+1)$cluster #initial cluster
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algorithm2 <- function(data){
print('Start: algorithm 2')
post_algo2 <- algo2_cpp(data, C)
print('Done: algorithm 2')
return(post_algo2)
}
Rcpp::sourceCpp('~/project/bayesian/algorithm/algo2.cpp')
res_algo2 <- algorithm2(data)
history()
log
Rcpp::sourceCpp('Dropbox/algorithm/slice.cpp')
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0, alpha=0.6)
# The following script compares the Dirichlet Process Mixture Model
# algorithms discussed in the Advanced Bayesian lectures. I followed
# the papers Neal(2000), , and Biel et al.(2006).
#
#--------------------------------------------------------------------
#--------------------------------------------------------------------
# Default setting
#--------------------------------------------------------------------
n = 200
set.seed(2357)
set.seed(2357)
n = 200
setwd('~/Dropbox/algorithm/')
require(cluster)
require(data.table)
source('data_model.R')
data1 = data_model1(n) # Model 1
data2 = data_model2(n) # Model 2
hist(data1, prob=TRUE, col='green')
lines(density(data1), col='red', lwd=3)
hist(data2, prob=TRUE, col='green')
lines(density(data2), col='red', lwd=3)
# Setting intial value for cluster 'C' using k-means algorithm.
C1 <- kmeans(data1, 2)$cluster #initial cluster
C2 <- kmeans(data2, 5)$cluster #initial cluster
plot(data1, col=C1)
plot(data2, col=C2)
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0, alpha=0.6)
Rcpp::sourceCpp('slice.cpp')
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0, alpha=0.6)
Rcpp::sourceCpp('slice.cpp')
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0, alpha=0.6)
Rcpp::sourceCpp('slice.cpp')
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0, alpha=0.6)
Rcpp::sourceCpp('slice.cpp')
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0, alpha=0.6)
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
Rcpp::sourceCpp('slice.cpp')
Rcpp::sourceCpp('slice.cpp')
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
Rcpp::sourceCpp('slice.cpp')
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
plot(data2, col=as.factor(mat_slice_model2[100,1:200]))
as.factor(mat_slice_model2[100,1:200])
mat_slice_model1 <- slice_cpp(data1, C1, mu_0= mean(data1))
plot(data1, col=as.factor(mat_slice_model1[100,1:200]))
plot(data1, col=as.factor(mat_slice_model1[100,1:200]))
as.factor(mat_slice_model1[100,1:200])
mat_slice_model1 <- slice_cpp(data1, C1, mu_0= mean(data1), K=1.0)
plot(data1, col=as.factor(mat_slice_model1[100,1:200]))
Rcpp::sourceCpp('var.cpp')
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- algo_var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
Rcpp::sourceCpp('var.cpp')
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
plot(data1, col=as.factor(mat_vari_model1[100,1:200]))
plot(data1, col=as.factor(mat_vari_model1[100,1:200]))
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1), K=1.0)
plot(data1, col=as.factor(mat_vari_model1[100,1:200]))
Rcpp::sourceCpp('var.cpp')
mat_vari_model2 <- var_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
plot(data2, col=as.factor(mat_vari_model2[100,1:200]))
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1), K=1.0)
plot(data1, col=as.factor(mat_vari_model1[100,1:200]))
mat_vari_model1 <- var_cpp(data1, C1, mu_0= mean(data1))
plot(data1, col=as.factor(mat_vari_model1[100,1:200]))

# Default setting
#--------------------------------------------------------------------
set.seed(2357)
n = 200
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
setwd('~/Dropbox/Adv_Bayes_algorithm/algorithm/')
require(cluster)
require(data.table)
require(rbenchmark)
source('data_model.R')
Rcpp::sourceCpp('algo2.cpp')
Rcpp::sourceCpp('algo4.cpp')
Rcpp::sourceCpp('algo8.cpp')
Rcpp::sourceCpp('slice.cpp')
Rcpp::sourceCpp('vari.cpp')
#--------------------------------------------------------------------
# Generate data and exploratory data analysis for hyperparameter
#--------------------------------------------------------------------
data1 = data_model1(n) # Model 1
data2 = data_model2(n) # Model 2
par(mfrow=c(1,2))
hist(data1, prob=TRUE, col='green', breaks=40)
lines(density(data1), col='red', lwd=3)
hist(data2, prob=TRUE, col='green', ylim =c(0,0.05), breaks=20)
lines(density(data2, bw=1.5), col='red', lwd=3)
# Setting intial value for cluster 'C' using k-means algorithm.
C1 <- kmeans(data1, 2)$cluster #initial cluster
C2 <- kmeans(data2, 5)$cluster #initial cluster
plot(data1, col=C1)
plot(data2, col=C2)
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algo2 <- function(){
mat_algo2_model1 <- algo2_cpp(data1, C1, mu_0= mean(data1))
mat_algo2_model2 <- algo2_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0= 100.0)
return(list(mat_algo2_model1, mat_algo2_model2))
}
#--------------------------------------------------------------------
# Algorithm 4
#--------------------------------------------------------------------
algo4 <- function(){
mat_algo4_model1 <- algo4_cpp(data1, C1, mu_0= mean(data1))
mat_algo4_model2 <- algo4_cpp(data2, C2, mu_0= mean(data2), K=0.15, v_0= 100.0)
return(list(mat_algo4_model1, mat_algo4_model2))
}
#--------------------------------------------------------------------
# Algorithm 8
#--------------------------------------------------------------------
algo8 <- function(){
mat_algo8_model1 <- algo8_cpp(data1, C1, mu_0= mean(data1))
mat_algo8_model2 <- algo8_cpp(data2, C2, mu_0= mean(data2), K=0.15, v_0= 100.0)
return(list(mat_algo8_model1, mat_algo8_model2))
}
#--------------------------------------------------------------------
# Sliced algorithm
#--------------------------------------------------------------------
slice <- function(){
mat_slice_model1 <- slice_cpp(data1, C1, mu_0= mean(data1))
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=0.15, v_0= 100.0)
return(list(mat_slice_model1, mat_slice_model2))
}
#--------------------------------------------------------------------
# Variational inference algorithm
#--------------------------------------------------------------------
vari <- function(){
mat_vari_model1 <- vari_cpp(data1, C1, mu_0= mean(data1))
mat_vari_model2 <- vari_cpp(data2, C2, mu_0= mean(data2), K=0.15, v_0= 100.0)
return(list(mat_vari_model1, mat_vari_model2))
}
#--------------------------------------------------------------------
# Comparing by visualization
#--------------------------------------------------------------------
res_algo2 <- algo2();
res_algo4 <- algo4();
res_algo8 <- algo8();
res_slice <- slice();
res_vari <- vari();
par(mfrow=c(2,5))
plot(data1, col=as.factor(res_algo2[[1]][100,1:200]))
plot(data1, col=as.factor(res_algo4[[1]][100,1:200]))
plot(data1, col=as.factor(res_algo8[[1]][100,1:200]))
plot(data1, col=as.factor(res_slice[[1]][100,1:200]))
plot(data1, col=as.factor(res_vari[[1]][100,1:200]))
plot(data2, col=as.factor(res_algo2[[2]][100,1:200]))
plot(data2, col=as.factor(res_algo4[[2]][100,1:200]))
plot(data2, col=as.factor(res_algo8[[2]][100,1:200]))
plot(data2, col=as.factor(res_slice[[2]][100,1:200]))
plot(data2, col=as.factor(res_vari[[2]][100,1:200]))
#--------------------------------------------------------------------
# Comparing by speed
#--------------------------------------------------------------------
benchmark( algo2(), algo4(), algo8(), slice(), vari(), replications=1)
save.image("./bayes1.RData")
rm(list=ls())
gc()
setwd('~/Dropbox/Adv_Bayes_algorithm/algorithm/')
load("./bayes1.RData")
ls()
require(data.table)
#--------------------------------------
# Trace plot
#--------------------------------------
klist = c(30, 60, 90, 120, 150)
par(mfrow=c(1,5))
for( k in klist){
plot(res_algo2[[1]][,k], ylab="", xlab="")
plot(res_algo4[[1]][,k], ylab="", xlab="")
plot(res_algo8[[1]][,k], ylab="", xlab="")
plot(res_slice[[1]][,k], ylab="", xlab="")
plot(res_vari[[1]][,k], ylab="", xlab="")
}
par(mfrow=c(1,5))
for( k in klist){
plot(res_algo2[[2]][,k], ylab="", xlab="")
plot(res_algo4[[2]][,k], ylab="", xlab="")
plot(res_algo8[[2]][,k], ylab="", xlab="")
plot(res_slice[[2]][,k], ylab="", xlab="")
plot(res_vari[[2]][,k], ylab="", xlab="")
}
#--------------------------------------
# Posterior plot
#--------------------------------------
res_list <- list(res_algo2, res_algo4, res_algo8, res_slice, res_vari)
# Model 1
par(mfrow=c(1,1))
x=-5000:18000/1000
density_x = rep(0, length(x))
density_x = 0.2*dnorm(x, mean =0, sd=1) + 0.8*dnorm(x, mean =10, sd=2)
plot( x, density_x, lwd=0.3, main="Model 1", cex=0.3, ylim=c(0,0.2))
count = 1
for( res in res_list){
raw <- res[[1]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
# Model 2
par(mfrow=c(1,2))
x=-2000:10000/200
proba_list= c(1,2,3,2,1)/9
sd_list = c(1,2,3,2,1)
mean_list = c(0,1,2,3,4)*10
density_x=rep(0, length(x))
for( i in 1:5){
density_x = density_x + proba_list[i]*dnorm(x, mean_list[i], sd_list[i])
}
plot( x, density_x, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.20))
count = 1
for( res in res_list){
raw <- res[[2]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
plot(density(data2, bw=1.0))
par(mfrow=c(1,1))
x=-2000:10000/200
proba_list= c(1,2,3,2,1)/9
sd_list = c(1,2,3,2,1)
mean_list = c(0,1,2,3,4)*10
density_x=rep(0, length(x))
for( i in 1:5){
density_x = density_x + proba_list[i]*dnorm(x, mean_list[i], sd_list[i])
}
plot( x, density_x, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.20))
count = 1
for( res in res_list){
raw <- res[[2]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
# Model 2
par(mfrow=c(1,1))
x=-2000:10000/200
proba_list= c(1,2,3,2,1)/9
sd_list = c(1,2,3,2,1)
mean_list = c(0,1,2,3,4)*10
density_x=rep(0, length(x))
for( i in 1:5){
density_x = density_x + proba_list[i]*dnorm(x, mean_list[i], sd_list[i])
}
plot( x, density_x, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.15))
count = 1
for( res in res_list){
raw <- res[[2]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
# Model 2
par(mfrow=c(1,1))
x=-2000:10000/200
proba_list= c(1,2,3,2,1)/9
sd_list = c(1,2,3,2,1)
mean_list = c(0,1,2,3,4)*10
density_x=rep(0, length(x))
for( i in 1:5){
density_x = density_x + proba_list[i]*dnorm(x, mean_list[i], sd_list[i])
}
plot( x, density_x, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.12))
count = 1
for( res in res_list){
raw <- res[[2]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
plot( x, density_x, lty =2, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.12))
# Model 2
par(mfrow=c(1,1))
x=-2000:10000/200
proba_list= c(1,2,3,2,1)/9
sd_list = c(1,2,3,2,1)
mean_list = c(0,1,2,3,4)*10
density_x=rep(0, length(x))
for( i in 1:5){
density_x = density_x + proba_list[i]*dnorm(x, mean_list[i], sd_list[i])
}
plot( x, density_x, lty =2, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.12))
plot( x, density_x, lty =3, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.12))
# Model 2
par(mfrow=c(1,1))
x=-2000:10000/200
proba_list= c(1,2,3,2,1)/9
sd_list = c(1,2,3,2,1)
mean_list = c(0,1,2,3,4)*10
density_x=rep(0, length(x))
for( i in 1:5){
density_x = density_x + proba_list[i]*dnorm(x, mean_list[i], sd_list[i])
}
plot( x, density_x, lty =3, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.12))
plot( x, density_x, lty = 1, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.12))
plot( x, density_x, col=6, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.12))
# Model 2
par(mfrow=c(1,1))
x=-2000:10000/200
proba_list= c(1,2,3,2,1)/9
sd_list = c(1,2,3,2,1)
mean_list = c(0,1,2,3,4)*10
density_x=rep(0, length(x))
for( i in 1:5){
density_x = density_x + proba_list[i]*dnorm(x, mean_list[i], sd_list[i])
}
plot( x, density_x, col=6, lwd=0.3, main="Model 2", cex=0.3, ylim=c(0, 0.12))
count = 1
for( res in res_list){
raw <- res[[2]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
# Model 1
par(mfrow=c(1,1))
x=-5000:18000/1000
density_x = rep(0, length(x))
density_x = 0.2*dnorm(x, mean =0, sd=1) + 0.8*dnorm(x, mean =10, sd=2)
plot( x, density_x, lwd=0.3, col=6, main="Model 1", cex=0.3, ylim=c(0,0.2))
count = 1
for( res in res_list){
raw <- res[[1]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
# Model 1
par(mfrow=c(1,1))
x=-5000:18000/1000
density_x = rep(0, length(x))
density_x = 0.2*dnorm(x, mean =0, sd=1) + 0.8*dnorm(x, mean =10, sd=2)
plot( x, density_x, lwd=0.6, col=6, main="Model 1", cex=0.3, ylim=c(0,0.2))
count = 1
for( res in res_list){
raw <- res[[1]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
par(mfrow=c(1,1))
x=-5000:18000/1000
density_x = rep(0, length(x))
density_x = 0.2*dnorm(x, mean =0, sd=1) + 0.8*dnorm(x, mean =10, sd=2)
plot( x, density_x, lwd=2.0, col=6, main="Model 1", cex=0.3, ylim=c(0,0.2))
count = 1
for( res in res_list){
raw <- res[[1]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
# Model 2
par(mfrow=c(1,1))
x=-2000:10000/200
proba_list= c(1,2,3,2,1)/9
sd_list = c(1,2,3,2,1)
mean_list = c(0,1,2,3,4)*10
density_x=rep(0, length(x))
for( i in 1:5){
density_x = density_x + proba_list[i]*dnorm(x, mean_list[i], sd_list[i])
}
plot( x, density_x, col=6, lwd=3.0, main="Model 2", cex=0.3, ylim=c(0, 0.12))
count = 1
for( res in res_list){
raw <- res[[2]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
# Model 1
par(mfrow=c(1,1))
x=-5000:18000/1000
density_x = rep(0, length(x))
density_x = 0.2*dnorm(x, mean =0, sd=1) + 0.8*dnorm(x, mean =10, sd=2)
plot( x, density_x, lwd=4.0, col=6, main="Model 1", cex=0.3, ylim=c(0,0.2))
count = 1
for( res in res_list){
raw <- res[[1]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
setwd('~/Dropbox/Adv_Bayes_algorithm/algorithm/')
setwd('~/Dropbox/Adv_Bayes_algorithm/algorithm/')
load("./bayes1.RData")
ls()
require(data.table)
setwd('~/Dropbox/Adv_Bayes_algorithm/algorithm/')
load("./bayes1.RData")
ls()
require(data.table)
#--------------------------------------
# Trace plot
#--------------------------------------
klist = c(30, 60, 90, 120, 150)
par(mfrow=c(1,5))
for( k in klist){
plot(res_algo2[[1]][,k], ylab="", xlab="")
plot(res_algo4[[1]][,k], ylab="", xlab="")
plot(res_algo8[[1]][,k], ylab="", xlab="")
plot(res_slice[[1]][,k], ylab="", xlab="")
plot(res_vari[[1]][,k], ylab="", xlab="")
}
par(mfrow=c(1,5))
for( k in klist){
plot(res_algo2[[2]][,k], ylab="", xlab="")
plot(res_algo4[[2]][,k], ylab="", xlab="")
plot(res_algo8[[2]][,k], ylab="", xlab="")
plot(res_slice[[2]][,k], ylab="", xlab="")
plot(res_vari[[2]][,k], ylab="", xlab="")
}
res_list <- list(res_algo2, res_algo4, res_algo8, res_slice, res_vari)
# Model 1
par(mfrow=c(1,1))
x=-5000:18000/1000
density_x = rep(0, length(x))
density_x = 0.2*dnorm(x, mean =0, sd=1) + 0.8*dnorm(x, mean =10, sd=2)
plot( x, density_x, lwd=4.0, col=6, main="Model 1", cex=0.3, ylim=c(0,0.2))
count = 1
for( res in res_list){
raw <- res[[1]][100,]
DT <- data.table(mu=raw[1:200], pre=raw[201:400], class= as.factor(raw[1:200]))
uni_DT <- unique(DT)
pred_p = pred_mu = pred_sd = rep(0, nrow(uni_DT))
for( i in 1:nrow(uni_DT)){
pred_p[i] <- mean(DT$class == (uni_DT$class[i]))
pred_mu[i] <- uni_DT$mu[i]
pred_sd[i] <- (1/uni_DT$pre[i])^(1/2)
}
density_x = rep(0, length(x))
for( i in 1:nrow(uni_DT)){
density_x = density_x + pred_p[i]*dnorm(x, mean = uni_DT$mu[i], sd = pred_sd[i])
}
points( x, density_x, lwd=0.3, cex=0.3, col=count)
count = count +1;
}
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))
legend("topleft", col=1:5, lty=1, lwd=2, legend=c("algo2","no gaps","algo8","slice","vari"))

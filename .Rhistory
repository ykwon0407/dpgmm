gc()
#--------------------------------------------------------------------
# Advanced Bayesian Midterm - Dirichelet Process Mixture Model
# 2013-22897 Kwon, Yongchan
#
# Short descriptions:
# The following script compares the Dirichlet Process Mixture Model
# algorithms discussed in the Advanced Bayesian lectures. I followed
# the papers Neal(2000) and lecture notes.
#
#--------------------------------------------------------------------
#--------------------------------------------------------------------
# Default setting
#--------------------------------------------------------------------
set.seed(2357)
n = 200
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
setwd('~/Dropbox/algorithm/')
require(cluster)
require(data.table)
source('data_model.R')
library(rbenchmark)
Rcpp::sourceCpp('~/Dropbox/algorithm/algo2.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/algo4.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/algo8.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/slice.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/var.cpp')
#--------------------------------------------------------------------
# Generate data and exploratory data analysis for hyperparameter
#--------------------------------------------------------------------
data1 = data_model1(n) # Model 1
data2 = data_model2(n) # Model 2
par(mfrow=c(1,2))
hist(data1, prob=TRUE, col='green', breaks=40)
lines(density(data1), col='red', lwd=3)
hist(data2, prob=TRUE, col='green', ylim =c(0,0.05), breaks=20)
lines(density(data2, bw=1.5), col='red', lwd=3)
# Setting intial value for cluster 'C' using k-means algorithm.
C1 <- kmeans(data1, 2)$cluster #initial cluster
C2 <- kmeans(data2, 5)$cluster #initial cluster
plot(data1, col=C1)
plot(data2, col=C2)
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algo2 <- function(){
mat_algo2_model1 <- algo2_cpp(data1, C1, mu_0= mean(data1))
mat_algo2_model2 <- algo2_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_algo2_model1, mat_algo2_model2))
}
#--------------------------------------------------------------------
# Algorithm 4
#--------------------------------------------------------------------
algo4 <- function(){
mat_algo4_model1 <- algo4_cpp(data1, C1, mu_0= mean(data1))
mat_algo4_model2 <- algo4_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_algo4_model1, mat_algo4_model2))
}
#--------------------------------------------------------------------
# Algorithm 8
#--------------------------------------------------------------------
algo8 <- function(){
mat_algo8_model1 <- algo8_cpp(data1, C1, mu_0= mean(data1))
mat_algo8_model2 <- algo8_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_algo8_model1, mat_algo8_model2))
}
#--------------------------------------------------------------------
# Sliced algorithm
#--------------------------------------------------------------------
slice <- function(){
mat_slice_model1 <- slice_cpp(data1, C1, mu_0= mean(data1), K=1.0)
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_slice_model1, mat_slice_model2))
}
#--------------------------------------------------------------------
# Variational inference algorithm
#--------------------------------------------------------------------
vari <- function(){
mat_vari_model1 <- vari_cpp(data1, C1, mu_0= mean(data1))
mat_vari_model2 <- vari_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_vari_model1, mat_vari_model2))
}
#--------------------------------------------------------------------
# Comparing by visualization
#--------------------------------------------------------------------
res_algo2 <- algo2();
res_algo4 <- algo4();
res_algo8 <- algo8();
res_slice <- slice();
res_vari <- vari();
par(mfrow=c(2,5))
plot(data1, col=as.factor(res_algo2[[1]][100,1:200]))
plot(data1, col=as.factor(res_algo4[[1]][100,1:200]))
plot(data1, col=as.factor(res_algo8[[1]][100,1:200]))
plot(data1, col=as.factor(res_slice[[1]][100,1:200]))
plot(data1, col=as.factor(res_vari[[1]][100,1:200]))
plot(data2, col=as.factor(res_algo2[[2]][100,1:200]))
plot(data2, col=as.factor(res_algo4[[2]][100,1:200]))
plot(data2, col=as.factor(res_algo8[[2]][100,1:200]))
plot(data2, col=as.factor(res_slice[[2]][100,1:200]))
plot(data2, col=as.factor(res_vari[[2]][100,1:200]))
#--------------------------------------------------------------------
# Comparing by speed
#--------------------------------------------------------------------
benchmark( algo2(), algo4(), algo8(), slice(), vari(), replications=1)
save.image("./bayes.RData")
rm(list=ls())
gc()
#--------------------------------------------------------------------
# Advanced Bayesian Midterm - Dirichelet Process Mixture Model
# 2013-22897 Kwon, Yongchan
#
# Short descriptions:
# The following script compares the Dirichlet Process Mixture Model
# algorithms discussed in the Advanced Bayesian lectures. I followed
# the papers Neal(2000) and lecture notes.
#
#--------------------------------------------------------------------
#--------------------------------------------------------------------
# Default setting
#--------------------------------------------------------------------
set.seed(2357)
n = 200
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
setwd('~/Dropbox/algorithm/')
require(cluster)
require(data.table)
source('data_model.R')
library(rbenchmark)
Rcpp::sourceCpp('~/Dropbox/algorithm/algo2.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/algo4.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/algo8.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/slice.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/var.cpp')
#--------------------------------------------------------------------
# Generate data and exploratory data analysis for hyperparameter
#--------------------------------------------------------------------
data1 = data_model1(n) # Model 1
data2 = data_model2(n) # Model 2
par(mfrow=c(1,2))
hist(data1, prob=TRUE, col='green', breaks=40)
lines(density(data1), col='red', lwd=3)
hist(data2, prob=TRUE, col='green', ylim =c(0,0.05), breaks=20)
lines(density(data2, bw=1.5), col='red', lwd=3)
# Setting intial value for cluster 'C' using k-means algorithm.
C1 <- kmeans(data1, 2)$cluster #initial cluster
C2 <- kmeans(data2, 5)$cluster #initial cluster
plot(data1, col=C1)
plot(data2, col=C2)
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algo2 <- function(){
mat_algo2_model1 <- algo2_cpp(data1, C1, mu_0= mean(data1))
mat_algo2_model2 <- algo2_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_algo2_model1, mat_algo2_model2))
}
#--------------------------------------------------------------------
# Algorithm 4
#--------------------------------------------------------------------
algo4 <- function(){
mat_algo4_model1 <- algo4_cpp(data1, C1, mu_0= mean(data1))
mat_algo4_model2 <- algo4_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_algo4_model1, mat_algo4_model2))
}
#--------------------------------------------------------------------
# Algorithm 8
#--------------------------------------------------------------------
algo8 <- function(){
mat_algo8_model1 <- algo8_cpp(data1, C1, mu_0= mean(data1))
mat_algo8_model2 <- algo8_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_algo8_model1, mat_algo8_model2))
}
#--------------------------------------------------------------------
# Sliced algorithm
#--------------------------------------------------------------------
slice <- function(){
mat_slice_model1 <- slice_cpp(data1, C1, mu_0= mean(data1), K=1.0)
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_slice_model1, mat_slice_model2))
}
#--------------------------------------------------------------------
# Variational inference algorithm
#--------------------------------------------------------------------
vari <- function(){
mat_vari_model1 <- vari_cpp(data1, C1, mu_0= mean(data1))
mat_vari_model2 <- vari_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_vari_model1, mat_vari_model2))
}
#--------------------------------------------------------------------
# Comparing by visualization
#--------------------------------------------------------------------
res_algo2 <- algo2();
res_algo4 <- algo4();
res_algo8 <- algo8();
res_slice <- slice();
res_vari <- vari();
par(mfrow=c(2,5))
plot(data1, col=as.factor(res_algo2[[1]][100,1:200]))
plot(data1, col=as.factor(res_algo4[[1]][100,1:200]))
plot(data1, col=as.factor(res_algo8[[1]][100,1:200]))
plot(data1, col=as.factor(res_slice[[1]][100,1:200]))
plot(data1, col=as.factor(res_vari[[1]][100,1:200]))
plot(data2, col=as.factor(res_algo2[[2]][100,1:200]))
plot(data2, col=as.factor(res_algo4[[2]][100,1:200]))
plot(data2, col=as.factor(res_algo8[[2]][100,1:200]))
plot(data2, col=as.factor(res_slice[[2]][100,1:200]))
plot(data2, col=as.factor(res_vari[[2]][100,1:200]))
#--------------------------------------------------------------------
# Comparing by speed
#--------------------------------------------------------------------
benchmark( algo2(), algo4(), algo8(), slice(), vari(), replications=1)
save.image("./bayes.RData")
rm(list=ls())
gc()
#--------------------------------------------------------------------
# Advanced Bayesian Midterm - Dirichelet Process Mixture Model
# 2013-22897 Kwon, Yongchan
#
# Short descriptions:
# The following script compares the Dirichlet Process Mixture Model
# algorithms discussed in the Advanced Bayesian lectures. I followed
# the papers Neal(2000) and lecture notes.
#
#--------------------------------------------------------------------
#--------------------------------------------------------------------
# Default setting
#--------------------------------------------------------------------
set.seed(2357)
n = 200
#--------------------------------------------------------------------
# Source cpp files
#--------------------------------------------------------------------
setwd('~/Dropbox/algorithm/')
require(cluster)
require(data.table)
require(rbenchmark)
source('data_model.R')
Rcpp::sourceCpp('~/Dropbox/algorithm/algo2.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/algo4.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/algo8.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/slice.cpp')
Rcpp::sourceCpp('~/Dropbox/algorithm/vari.cpp')
#--------------------------------------------------------------------
# Generate data and exploratory data analysis for hyperparameter
#--------------------------------------------------------------------
data1 = data_model1(n) # Model 1
data2 = data_model2(n) # Model 2
par(mfrow=c(1,2))
hist(data1, prob=TRUE, col='green', breaks=40)
lines(density(data1), col='red', lwd=3)
hist(data2, prob=TRUE, col='green', ylim =c(0,0.05), breaks=20)
lines(density(data2, bw=1.5), col='red', lwd=3)
# Setting intial value for cluster 'C' using k-means algorithm.
C1 <- kmeans(data1, 2)$cluster #initial cluster
C2 <- kmeans(data2, 5)$cluster #initial cluster
plot(data1, col=C1)
plot(data2, col=C2)
#--------------------------------------------------------------------
# Algorithm 2
#--------------------------------------------------------------------
algo2 <- function(){
mat_algo2_model1 <- algo2_cpp(data1, C1, mu_0= mean(data1))
mat_algo2_model2 <- algo2_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_algo2_model1, mat_algo2_model2))
}
#--------------------------------------------------------------------
# Algorithm 4
#--------------------------------------------------------------------
algo4 <- function(){
mat_algo4_model1 <- algo4_cpp(data1, C1, mu_0= mean(data1))
mat_algo4_model2 <- algo4_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_algo4_model1, mat_algo4_model2))
}
#--------------------------------------------------------------------
# Algorithm 8
#--------------------------------------------------------------------
algo8 <- function(){
mat_algo8_model1 <- algo8_cpp(data1, C1, mu_0= mean(data1))
mat_algo8_model2 <- algo8_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_algo8_model1, mat_algo8_model2))
}
#--------------------------------------------------------------------
# Sliced algorithm
#--------------------------------------------------------------------
slice <- function(){
mat_slice_model1 <- slice_cpp(data1, C1, mu_0= mean(data1), K=1.0)
mat_slice_model2 <- slice_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_slice_model1, mat_slice_model2))
}
#--------------------------------------------------------------------
# Variational inference algorithm
#--------------------------------------------------------------------
vari <- function(){
mat_vari_model1 <- vari_cpp(data1, C1, mu_0= mean(data1))
mat_vari_model2 <- vari_cpp(data2, C2, mu_0= mean(data2), K=1.0, v_0 = 100.0)
return(list(mat_vari_model1, mat_vari_model2))
}
#--------------------------------------------------------------------
# Comparing by visualization
#--------------------------------------------------------------------
res_algo2 <- algo2();
res_algo4 <- algo4();
res_algo8 <- algo8();
res_slice <- slice();
res_vari <- vari();
par(mfrow=c(2,5))
plot(data1, col=as.factor(res_algo2[[1]][100,1:200]))
plot(data1, col=as.factor(res_algo4[[1]][100,1:200]))
plot(data1, col=as.factor(res_algo8[[1]][100,1:200]))
plot(data1, col=as.factor(res_slice[[1]][100,1:200]))
plot(data1, col=as.factor(res_vari[[1]][100,1:200]))
plot(data2, col=as.factor(res_algo2[[2]][100,1:200]))
plot(data2, col=as.factor(res_algo4[[2]][100,1:200]))
plot(data2, col=as.factor(res_algo8[[2]][100,1:200]))
plot(data2, col=as.factor(res_slice[[2]][100,1:200]))
plot(data2, col=as.factor(res_vari[[2]][100,1:200]))
#--------------------------------------------------------------------
# Comparing by speed
#--------------------------------------------------------------------
benchmark( algo2(), algo4(), algo8(), slice(), vari(), replications=1)
save.image("./bayes.RData")
par(mfrow=c(2,5))
plot(data1, col=as.factor(res_algo2[[1]][100,1:200]))
plot(data1, col=as.factor(res_algo4[[1]][100,1:200]))
plot(data1, col=as.factor(res_algo8[[1]][100,1:200]))
plot(data1, col=as.factor(res_slice[[1]][100,1:200]))
plot(data1, col=as.factor(res_vari[[1]][100,1:200]))
plot(data2, col=as.factor(res_algo2[[2]][100,1:200]))
plot(data2, col=as.factor(res_algo4[[2]][100,1:200]))
plot(data2, col=as.factor(res_algo8[[2]][100,1:200]))
plot(data2, col=as.factor(res_slice[[2]][100,1:200]))
plot(data2, col=as.factor(res_vari[[2]][100,1:200]))
C1 <- kmeans(data1, 2)$cluster #initial cluster
C2 <- kmeans(data2, 5)$cluster #initial cluster
plot(data1, col=C1)
plot(data2, col=C2)
par(mfrow=c(1,2))
hist(data1, prob=TRUE, col='green', breaks=40)
lines(density(data1), col='red', lwd=3)
hist(data2, prob=TRUE, col='green', ylim =c(0,0.05), breaks=20)
lines(density(data2, bw=1.5), col='red', lwd=3)
plot(data1, col=C1)
plot(data2, col=C2)
load("./bayes.RData")
ls()
res_algo2[[1]]
res_algo2[[1]][,1]
plot(res_algo2[[1]][,1])
plot(res_algo2[[1]][,2])
plot(res_vari[[1]][,2])
plot(res_algo2[[1]][,2])
plot(res_algo4[[1]][,2])
plot(res_algo8[[1]][,2])
plot(res_slice[[1]][,2])
plot(res_vari[[1]][,2])
k=5
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
k=3
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
k=8
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
par(mfrow=c(1,5))
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
k=10
par(mfrow=c(1,5))
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
k=11
par(mfrow=c(1,5))
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
k=100
par(mfrow=c(1,5))
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
klist = c(30, 60, 90, 120, 150)
par(mfrow=c(5,5))
for( k in klist){
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
}
klist = c(30, 60, 90, 120, 150)
par(mfrow=c(5,5))
for( k in klist){
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
}
par(mfrow=c(5,5))
k
plot(res_algo2[[1]][,k])
par(mfrow=c(1,5))
for( k in klist){
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
}
require(traceplot)
install.packages("traceplot")
require(traceplot)
traceplot(res_algo2[[1]][,k])
for( k in klist){
plot(res_algo2[[2]][,k])
plot(res_algo4[[2]][,k])
plot(res_algo8[[2]][,k])
plot(res_slice[[2]][,k])
plot(res_vari[[2]][,k])
}
par(mfrow=c(1,5))
for( k in klist){
plot(res_algo2[[2]][,k])
plot(res_algo4[[2]][,k])
plot(res_algo8[[2]][,k])
plot(res_slice[[2]][,k])
plot(res_vari[[2]][,k])
}
for( k in klist){
par(mfrow=c(1,5), title=k)
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
}
for( k in klist){
par(mfrow=c(1,5))
plot(res_algo2[[1]][,k], title=k)
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
}
for( k in klist){
par(mfrow=c(1,5))
plot(res_algo2[[1]][,k], title="mu")
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
}
for( k in klist){
par(mfrow=c(1,5))
plot(res_algo2[[1]][,k], main="mu")
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
}
klist = c(30, 60, 90, 120, 150)
for( k in klist){
par(mfrow=c(1,5))
plot(res_algo2[[1]][,k])
plot(res_algo4[[1]][,k])
plot(res_algo8[[1]][,k])
plot(res_slice[[1]][,k])
plot(res_vari[[1]][,k])
}
plot(res_algo2[[1]][,k], ylab="", xlab="")
klist = c(30, 60, 90, 120, 150)
par(mfrow=c(1,5))
for( k in klist){
plot(res_algo2[[1]][,k], ylab="", xlab="")
plot(res_algo4[[1]][,k], ylab="", xlab="")
plot(res_algo8[[1]][,k], ylab="", xlab="")
plot(res_slice[[1]][,k], ylab="", xlab="")
plot(res_vari[[1]][,k], ylab="", xlab="")
}
par(mfrow=c(1,5))
for( k in klist){
plot(res_algo2[[2]][,k], ylab="", xlab="")
plot(res_algo4[[2]][,k], ylab="", xlab="")
plot(res_algo8[[2]][,k], ylab="", xlab="")
plot(res_slice[[2]][,k], ylab="", xlab="")
plot(res_vari[[2]][,k], ylab="", xlab="")
}
